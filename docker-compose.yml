# Pike - AI-powered document assistant
# Docker Compose configuration for development and production

services:
  # Development service
  pike-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:5000"
    environment:
      - NODE_ENV=development
      - PORT=5000
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    env_file:
      - .env
    volumes:
      # Mount source code for hot reloading
      - .:/app
      - /app/node_modules
      - /app/dist
      # Optional: Mount for persistent uploads
      - pike_uploads_dev:/app/uploads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/stats"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - dev

  # Production service
  pike-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "3000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    env_file:
      - .env
    volumes:
      # Optional: Mount for persistent uploads
      - pike_uploads_prod:/app/uploads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/stats"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - prod

  # Optional: PostgreSQL database for persistent data
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: pike
      POSTGRES_USER: pike
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-pike_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    ports:
      - "5432:5432"
    profiles:
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pike -d pike"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Optional: Redis for caching and session storage
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    profiles:
      - cache
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - pike-prod
    restart: unless-stopped
    profiles:
      - proxy

volumes:
  pike_uploads_dev:
  pike_uploads_prod:
  postgres_data:
  redis_data:

networks:
  default:
    name: pike-network